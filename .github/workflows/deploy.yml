name: adCampaign CI/CD

on:
  push:
    branches:
      - main

jobs:
  check-backend-changes:
    runs-on: ubuntu-latest
    outputs:
      backend_changed: ${{ steps.check.outputs.backend_changed }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Check if backend changed
        id: check
        run: |
          if git diff --name-only HEAD^ HEAD | grep -q '^backend/'; then
            echo "backend_changed=true" >> $GITHUB_ENV
            echo "backend_changed=true" >> $GITHUB_OUTPUT
          else
            echo "backend_changed=false" >> $GITHUB_ENV
            echo "backend_changed=false" >> $GITHUB_OUTPUT
          fi

  check-frontend-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend_changed: ${{ steps.check.outputs.frontend_changed }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Check if frontend changed
        id: check
        run: |
          if git diff --name-only HEAD^ HEAD | grep -q '^client/'; then
            echo "frontend_changed=true" >> $GITHUB_ENV
            echo "frontend_changed=true" >> $GITHUB_OUTPUT
          else
            echo "frontend_changed=false" >> $GITHUB_ENV
            echo "frontend_changed=false" >> $GITHUB_OUTPUT
          fi

  deploy-backend:
    name: Deploy Backend to Railway
    runs-on: ubuntu-latest
    container: ghcr.io/railwayapp/cli:latest
    needs: check-backend-changes
    if: needs.check-backend-changes.outputs.backend_changed == 'true'
    env:
      SVC_ID: ${{ secrets.RAILWAY_API_SERVICE}}
      RAILWAY_TOKEN: ${{ secrets.RAILWAY_API_TOKEN }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Create .env file for backend
        run: |
          printf "%s" "${{ secrets.BACKEND_ENV_FILE }}" > backend/.env

      - name: Deploy to Railway
        run: railway up --service=${{ env.SVC_ID }}

  deploy-frontend:
    name: Deploy Frontend to Vercel
    runs-on: ubuntu-latest
    needs: check-frontend-changes
    if: needs.check-frontend-changes.outputs.frontend_changed == 'true'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Create .env file for frontend
        run: echo "${{ secrets.FRONTEND_ENV_FILE }}" > client/.env.production

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Pull Vercel Project Settings
        run: vercel pull --yes --environment=production --token ${{ secrets.VERCEL_API_TOKEN }}

      - name: Deploy to Vercel
        run: vercel --prod --cwd client --token ${{ secrets.VERCEL_API_TOKEN }}
